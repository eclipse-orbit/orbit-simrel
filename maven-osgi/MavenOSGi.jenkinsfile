pipeline {
  agent any

   options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
    disableConcurrentBuilds()
    skipDefaultCheckout true
  }

  tools {
    maven 'apache-maven-latest'
    jdk 'temurin-jdk21-latest'
  }

  environment {
    PUBLISH_LOCATION = 'simrel/maven-osgi'
  }

  parameters {
    choice(
      name: 'BUILD_TYPE',
      choices: ['nightly', 'milestone', 'release'],
      description: '''
        Choose the type of build.
        Note that a release build will not promote the build, but rather will promote the most recent milestone build.
        '''
    )

    booleanParam(
      name: 'PROMOTE',
      defaultValue: true,
      description: 'Whether to promote the build to the download server.'
    )

    booleanParam(
      name: 'DASH_STRICT',
      defaultValue: true,
      description: 'Whether to fail the build if there are <a href="https://gitlab.eclipse.org/eclipsefdn/emo-team/iplab/-/issues/>dash license reviews</a> required.'
    )
  }

  stages {
    stage('Display Parameters') {
      steps {
        script {
          def description = """
BUILD_TYPE=${params.BUILD_TYPE}
DASH_STRICT=${params.DASH_STRICT}
PROMOTE=${params.PROMOTE}
""".trim()
          echo description
          currentBuild.description = description.replace("\n", "<br/>")
          env.PROMOTE = params.PROMOTE
          env.BUILD_TYPE = params.BUILD_TYPE
          env.DASH_STRICT = params.DASH_STRICT
        }
      }
    }

    stage('Git Checkout') {
      steps {
        script {
          def gitVariables = checkout(
            poll: false,
            scm: [
              $class: 'GitSCM',
              branches: [[name: '*/main']],
              doGenerateSubmoduleConfigurations: false,
              submoduleCfg: [],
              extensions: [
                [$class: 'CloneOption', shallow: true],
                [$class: 'SparseCheckoutPaths', sparseCheckoutPaths:[[$class:'SparseCheckoutPath', path:'maven-osgi/']]]
              ],
              userRemoteConfigs: [[url: 'https://github.com/eclipse-orbit/orbit-simrel.git' ]]
            ]
          )

          echo "$gitVariables"
          env.GIT_COMMIT = gitVariables.GIT_COMMIT
        }
      }
    }

    stage('Build Orbit Maven OSGi') {
      steps {
        sshagent(['projects-storage.eclipse.org-bot-ssh']) {
          dir('maven-osgi') {
            withCredentials([
                string(credentialsId: 'gitlab-api-token', variable: 'GITLAB_API_TOKEN'), 
                file(credentialsId: 'secret-subkeys.asc', variable: 'KEYRING'),
                string(credentialsId: 'gpg-passphrase', variable: 'MAVEN_GPG_PASSPHRASE') 
              ]) {

              sh '''
                if [[ $PROMOTE == false ]]; then
                  promotion_argument='-Dorg.eclipse.justj.p2.manager.args='
                fi
                mvn \
                  --no-transfer-progress \
                  $promotion_argument \
                  -Pgpg-sign \
                  -Dtycho.pgp.signer.bc.secretKeys="${KEYRING}" \
                  -Dorg.eclipse.justj.p2.manager.build.url=$JOB_URL \
                  -Dorg.eclipse.justj.p2.manager.relative=$PUBLISH_LOCATION \
                  -Dgit.commit=$GIT_COMMIT \
                  -Dbuild.id=$BUILD_NUMBER \
                  -Dbuild.type=$BUILD_TYPE \
                  -Ddash.projectId=tools.orbit \
                  -Ddash.fail=$DASH_STRICT \
                  -Dtycho.target.eager=true \
                  -Ddash.iplab.token=$GITLAB_API_TOKEN \
                  clean \
                  verify
                '''
              script {
                 def reviewSummary = readFile(file: 'target/dash/review-summary')
                 currentBuild.description += "<br/><br/>" + reviewSummary.replaceAll("\\[(?:maven/mavencentral/|p2/orbit/p2.eclipse.plugin/)(.*)\\]\\((.*)\\)\r?\n", "<a href=\"\$2\">\$1</a><br/>\n")
              }
            }
          }
        }
      }
    }
  }

  post {
    failure {
      archiveArtifacts 'maven-osgi/**'
      mail to: 'ed.merks@gmail.com',
      subject: "[Orbit CI] Build Failure ${currentBuild.fullDisplayName}",
      mimeType: 'text/html',
      body: "Project: ${env.JOB_NAME}<br/>Build Number: ${env.BUILD_NUMBER}<br/>Build URL: ${env.BUILD_URL}<br/>Console: ${env.BUILD_URL}/console"
    }

    fixed {
      mail to: 'ed.merks@gmail.com',
      subject: "[Orbit CI] Back to normal ${currentBuild.fullDisplayName}",
      mimeType: 'text/html',
      body: "Project: ${env.JOB_NAME}<br/>Build Number: ${env.BUILD_NUMBER}<br/>Build URL: ${env.BUILD_URL}<br/>Console: ${env.BUILD_URL}/console"
    }

    cleanup {
      deleteDir()
    }
  }
}